.modal-content
  .modal-header
    %button.close{"aria-hidden" => "true", "data-dismiss" => "modal", type: "button"} Ã—
    %h4.modal-title= t'new_metering_point'
  .modal-body
    = simple_form_for @metering_point, remote: true, url: wizard_update_wizard_metering_points_path, method: 'put'  do |f|
      %h3=t('define_metering_point')
      %fieldset
        = f.input :mode, collection: MeteringPoint.modes.map(&:to_sym), include_blank: false, as: :radio_buttons, label: t("metering_point_mode"), checked: MeteringPoint.modes.first
        = f.input :name
        %span
          = t('virtual_metering_point')
          %small
            %i.normal-info-circle.fa.fa-info-circle{'data-content' => t('metering_point_virtual_info')}
        = f.input :virtual, label: false, wrapper: :vertical_boolean, input_html: { checked: false }
        %span
          = t('add_me_to_this_metering_point')
          %small
            %i.normal-info-circle.fa.fa-info-circle{'data-content' => t('metering_point_wizard_users_info')}
        = f.input :add_user, as: :boolean, wrapper: :vertical_boolean, checked_value: true, unchecked_value: false, input_html: { checked: true }, label: false

      %h3=t('add_meter')
      %fieldset
        .js-dependent-fields{data: {checkbox: {id: 'metering_point_virtual', value: 'true'}}}
          = t('as_this_metering_point_is_virtual_it_will_not_have_a_meter')
          = t('instead_you_can_define_the_formula_to_calculate_the_data_for_this_metering_point')
          %h5
            %span
              = t('formula')
              %small
                %i.normal-info-circle.fa.fa-info-circle{'data-content' => t('metering_point_formula_info')}
          #formula_parts
            = f.simple_fields_for :formula_parts do |formula_part|
              = render 'formula_part_fields', :f => formula_part, locals: {metering_point: @metering_point}
            .links.mar-btm
              = link_to_add_association t('add_formula_part'), f, :formula_parts, class: "btn btn-xs btn-default btn-rounded btn-labeled fa fa-plus"
        .js-dependent-fields{data: {checkbox: {id: 'metering_point_virtual', value: 'false'}}}
          = f.simple_fields_for @meter do |ff|
            - if current_user.editable_metering_points.collect(&:meter).uniq.compact.any?
              = ff.input :existing_meter, as: :radio_buttons, collection: [t("create_new_meter"), t("add_existing_meter")], checked: t("create_new_meter"), label: false
              .js-dependent-fields{data: {radio: {name: 'metering_point[meter][existing_meter]', value: t("add_existing_meter")}}}
                = ff.input :meter_id, collection: current_user.editable_metering_points.collect(&:meter).uniq.compact, :label_method => lambda { |m| m.name }, include_blank: false, input_html: { class: 'select2'}, label: false, selected: current_user.editable_metering_points.collect(&:meter).uniq.compact.first
              .js-dependent-fields{data: {radio: {name: 'metering_point[meter][existing_meter]', value: t("create_new_meter")}}}
                = ff.input :manufacturer_product_serialnumber
                = ff.input :smartmeter, as: :boolean, wrapper: :vertical_boolean, input_html: { checked: 'false' }
            - else
              = ff.input :manufacturer_product_serialnumber
              = ff.input :smartmeter, as: :boolean, wrapper: :vertical_boolean, input_html: { checked: false }
      %h3=t('establish_data_connection')
      %fieldset
        = f.simple_fields_for @contract do |ff|
          .js-dependent-fields{data: {checkbox: {id: 'metering_point_virtual', value: 'false'}}}
            .js-dependent-fields{data: {checkbox: {id: 'metering_point_meter_smartmeter', value: 'true'}}}
              .js-dependent-fields{data: {radio: {name: 'metering_point[meter][existing_meter]', value: t("create_new_meter")}}}
                = ff.association :organization, input_html: {class: 'select2'}, label: t('smart_metering_provider')
              .js-dependent-fields{'data-select-id' => 'metering_point_contract_organization_id', 'data-option-value' => Organization.where(slug: 'discovergy').first.id}
                = ff.input :username
                = ff.input :password
              .js-dependent-fields{'data-select-id' => 'metering_point_contract_organization_id', 'data-option-value' => Organization.where(slug: 'mysmartgrid').first.id}
                = ff.input :sensor_id, as: :text, :input_html => {value: ''}, label_method: :sensor_id
                = ff.input :x_token, as: :text, :input_html => {value: ''}, label_method: :x_token
            .js-dependent-fields{data: {radio: {name: 'metering_point[meter][existing_meter]', value: t("add_existing_meter")}}}
              = t('the_metering_point_will_get_its_data_via_the_connection_established_by_the_selected_meter')
            .js-dependent-fields{data: {radio: {name: 'metering_point[meter][existing_meter]', value: t("create_new_meter")}}}
              .js-dependent-fields{data: {checkbox: {id: 'metering_point_meter_smartmeter', value: 'false'}}}
                = t('no_smartmeter_means_you_get_dummy_data')
          .js-dependent-fields{data: {checkbox: {id: 'metering_point_virtual', value: 'true'}}}
            = t('virtual_metering_point_means_you_get_the_data_out_of_others_so_no_seperatate_data_conncection_is_needed')