$(".modal-dialog").html("<%= escape_javascript( render 'wizard_registers/wizard') %>");
var form;

form = $('#new_register_base').show();

form.steps({
  headerTag: 'h3',
  bodyTag: 'fieldset',
  transitionEffect: 'slideLeft',
  labels: {
    current: "<%= escape_javascript( t('current_step')) %>",
    pagination: "<%= escape_javascript( t('pagination')) %>",
    finish: "<%= escape_javascript( t('save')) %>",
    next: "<%= escape_javascript( t('next')) %>",
    previous: "<%= escape_javascript( t('back')) %>",
    loading: "<%= escape_javascript( t('loading')) %>..."
  },
  onStepChanging: function(event, currentIndex, newIndex) {
    if (currentIndex > newIndex) {
      return true;
    }
    if (currentIndex < newIndex) {
      form.find('.body:eq(' + newIndex + ') label.error').remove();
      form.find('.body:eq(' + newIndex + ') .error').removeClass('error');
    }
    //validate the length of the register name
    if (newIndex == 1){
      if (form.find('#register_base_name').val().length > 30){
        form.validate().showErrors({
          "register_base[name]": "<%= escape_javascript( t('errors.messages.too_long', count: 30))%>"
        });
        return false;
      }
    }
    //validate the uniqueness of the serialnnumber via ajax-call
    if (newIndex == 2){
      if ($(".js-dependent-fields[style='display: none;'][data-radio-name='register_base[meter][existing_meter]']").find("#register_base_meter_manufacturer_product_serialnumber").length == 0) {
        var serialnumber_valid = ($.ajax({url: "/meters/validate?register[meter][manufacturer_product_serialnumber]=" + $("#register_base_meter_manufacturer_product_serialnumber").val(), dataType: 'json', async: false}).responseText == 'true');
        if (!serialnumber_valid) {
          form.validate().showErrors({
            "register_base[meter][manufacturer_product_serialnumber]": "<%= escape_javascript( t('errors.messages.already_exists'))%>"
          });
          return false;
        }
      }
    }
    form.validate().settings.ignore = ":disabled,:hidden";
    return form.valid();
  },
  onStepChanged: function(event, currentIndex, priorIndex) {
    // if (currentIndex === 2 && Number($('#age-2').val()) >= 18) {
    //   form.steps('next');
    // }
  },
  onFinishing: function(event, currentIndex) {
    form.validate().settings.ignore = ':disabled,:hidden';
    return form.valid();
  },
  onFinished: function(event, currentIndex) {
    form.submit();
  }
}).validate({
  errorPlacement: function(error, element) {
    element.after(error);
  },
  messages: {
    required: "<%= escape_javascript( t('errors.messages.blank'))%>",
    number: "<%= escape_javascript( t('errors.messages.not_a_number'))%>",
    equalTo: "<%= escape_javascript( t('errors.messages.confirmation'))%>",
    accept: "<%= escape_javascript( t('errors.messages.accepted'))%>",
    unique: "<%= escape_javascript( t('errors.messages.already_exists'))%>"
  }
});