#!/usr/bin/env ruby

require_relative "../config/environment"

# get all classes to generate
all_classes     = ActiveRecord::Base.descendants
ignored_classes = [
 ActiveAdmin::Comment,
 ActsAsVotable::Vote,
 Comment,
 Doorkeeper::AccessGrant,
 Doorkeeper::AccessToken,
 Doorkeeper::Application,
 Role,
 Role::HABTM_Users,
 User::HABTM_Roles
]
classes = all_classes - ignored_classes

class FileWriter

  cattr_accessor :active_admin_app_path
  attr_accessor :klass, :class_name, :superclass_name, :module_name

  def initialize(klass)
    @klass = klass
  end

  def write_model_definition
    begin
      create_namespace_directory
      write_class_definition_file
    rescue => e
      puts "Failed to write model definition for #{self.klass}:"
      puts e
      puts e.backtrace.join("\n")
      puts self.inspect
    end
  end

  def inspect
    puts "** Info for class #{klass.to_s} **"
    puts "namespace:  #{module_name}"
    puts "superclass: #{superclass_name}"
  end

  def class_name
    klass.to_s
  end

  def superclass_name
    klass.superclass.to_s == "ActiveRecord::Base" ? "ApplicationRecord" : klass.superclass.to_s
  end

  # only expecting one namespace right now, i.e. A::B::C won't work
  def module_name
    parts = class_name.split("::")
    parts.size == 1 ? nil : parts.first
  end

  # private

  def create_namespace_directory
    return unless module_name
    cmd = "mkdir -p #{rails_models_directory}/#{module_name.underscore}"
    `#{cmd}`
  end

  def write_class_definition_file
    File.open(file_path, "w") { |f| f.write(class_definition_string) }
  end

  def file_path
    File.join(rails_models_directory, file_name).to_s
  end

  def file_name
    "#{class_name.underscore}.rb"
  end

  def class_definition_string
    "class #{class_name} < #{superclass_name}\nend\n\n"
  end

  def rails_models_directory
    File.join(FileWriter.active_admin_app_path, "/app/models")
  end
end

unless Rails.configuration.eager_load
  raise "ERROR: config.eager_load must be (temporarily) set to true in config/development.rb."
end

FileWriter.active_admin_app_path = "../active-admin"
classes.each do |klass|
  writer = FileWriter.new(klass)
  writer.write_model_definition
end
