#!/usr/bin/env ruby
require 'optparse'

options = {}
$opts = OptionParser.new do |opts|
  opts.banner = "Usage: #{$PROGRAM_NAME} [options] <file> # minimal example is app/pdfs/minimal.slim"
  opts.on('--pdf', 'Render as PDF instead of HTML') do |opt|
    options[:pdf] = true
  end
  opts.on_tail('-h', '--help', 'Show this message') do |opt|
    usage
  end
end

# display command-line usage, with optional message
def usage(message = nil)
  unless message.nil?
    STDERR.puts "ERROR: #{message}"
  end
  puts $opts
  exit 1
end

# process command-line
begin $opts.parse! ARGV
rescue OptionParser::ParseError => e
  usage e.message
end.parse!

# when no file argument is given display usage
if ARGV.empty?
  usage
  exit 1
end

puts 'starting app ....'

file = ARGV[0]

require 'bundler/setup'
require './config/buzzn'

generator =
  case file
  when /01_messvertrag.slim$/
    contract = Contract::MeteringPointOperator.first
    Pdf::MeteringPointOperator.new(contract)
  when /02_abwicklungsvertrag.slim$/
    contract = Contract::LocalpoolProcessing.first
    Pdf::LocalPoolProcessingContract.new(contract)
  when /invoice.slim$/
    billing = Billing.all.detect { |b| !b.items.first.end_reading.nil? && !b.items.first.begin_reading.nil? }
    raise 'could not find valid billing' unless billing
    Pdf::Invoice.new(billing)
  else
    Pdf::Minimal.new(file)
  end
type = options[:pdf] ? 'pdf' : 'html'

print "rendering #{type} ... "

filename = File.basename(file).sub('slim', type)
content = generator.send("to_#{type}")

File.open(filename, 'wb') do |f|
  f.print(content)
end

puts filename
